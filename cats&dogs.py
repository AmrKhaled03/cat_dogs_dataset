# -*- coding: utf-8 -*-
"""Cats&Dogs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kups-iYhcJoxbsiy0p-F88TGSg4WANIe
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Load the dataset
file_path = '/content/drive/MyDrive/AI/sampleSubmission.csv'
data = pd.read_csv(file_path)

# Preprocess the data
# Assuming your dataset contains image paths and labels, you would need to load the images and preprocess them.
# You can use libraries like OpenCV or PIL for loading images, and perform preprocessing like resizing, normalization, etc.

# Example preprocessing:
# images = preprocess_images(data['image_path'])  # Placeholder function for loading and preprocessing images
# labels = data['label']

# Split the data into training and testing sets
# train_images, test_images, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)

# Define image dimensions and number of classes
img_height = 28
img_width = 28
img_channels = 1  # Assuming grayscale images
num_classes = 10   # Number of classes in your dataset

# Define CNN architecture
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, img_channels)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dropout(0.5),
    layers.Dense(64, activation='relu'),
    layers.Dense(num_classes, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Split the data into training and testing sets
# Assuming you have loaded your data into 'images' and 'labels' arrays
# Placeholder code for demonstration purposes
images = np.random.randn(1000, 28, 28, 1)
labels = np.random.randint(0, num_classes, size=(1000,))

train_images, test_images, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)

# Train the model
history = model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))

# Evaluate the model for overfitting
train_acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
epochs = range(1, len(train_acc) + 1)

# Plotting
plt.plot(epochs, train_acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Apply data augmentation and dropout
datagen = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Retrain the model with augmented data and dropout
history_augmented = model.fit_generator(datagen.flow(train_images, train_labels, batch_size=32),
                                        steps_per_epoch=len(train_images) / 32,
                                        epochs=10,
                                        validation_data=(test_images, test_labels))

# Plot the results
train_acc_augmented = history_augmented.history['accuracy']
val_acc_augmented = history_augmented.history['val_accuracy']
epochs_augmented = range(1, len(train_acc_augmented) + 1)

plt.plot(epochs_augmented, train_acc_augmented, 'bo', label='Training acc (with augmentation)')
plt.plot(epochs_augmented, val_acc_augmented, 'b', label='Validation acc (with augmentation)')
plt.title('Training and validation accuracy with data augmentation and dropout')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

import matplotlib.pyplot as plt

# Plotting
plt.figure(figsize=(12, 6))

# Plot training loss
plt.subplot(1, 2, 1)
plt.plot(epochs, history.history['loss'], 'bo', label='Training Loss (before)')
plt.plot(epochs, history.history['val_loss'], 'b', label='Validation Loss (before)')
plt.title('Training and Validation Loss (Before)')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Plot training loss with data augmentation and dropout
plt.subplot(1, 2, 2)
plt.plot(epochs_augmented, history_augmented.history['loss'], 'bo', label='Training Loss (after)')
plt.plot(epochs_augmented, history_augmented.history['val_loss'], 'b', label='Validation Loss (after)')
plt.title('Training and Validation Loss (After Data Augmentation and Dropout)')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()